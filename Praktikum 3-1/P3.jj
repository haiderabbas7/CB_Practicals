options {
    STATIC = false;
}

PARSER_BEGIN(P3)
 public class P3 {
        private static SymbolTable.SymbolTable symbolTable = new SymbolTable.SymbolTable();

  public static void main (String args []) {
   P3 parser = new P3(System.in);
   try {
    String result = parser.start();
    System.out.println(result);
   } catch (ParseException e) {
    System.err.println(e);
   }
  }
 }
PARSER_END(P3)

SKIP:
 { "\r" | "\n" | "\t" | " " }

TOKEN :
{
  <FINAL : "final">
| <INT : "int">
| <PRINT : "print">
| <IF : "if">
| <WHILE : "while">
| <ELSE : "else">
| <COMPOP : "!=" | "==" | "<=" | ">=" | ">" | "<">
| <NUMBER : ("0" | ["1"-"9"] (["0"-"9"])*)>
| <IDENT : (["a"-"z"] (["a"-"z"] | ["A"-"Z"] | ["0"-"9"])*)>
}

//Programm aus Aufg1 zum Testen: final int i = 5, j = 7; i+3*j

void CONSTDECL() :
{}
{
    <FINAL> <INT> CONSTZUW() ("," CONSTZUW())* ";"
}

void CONSTZUW():
{ String constName, constValue; }
{
    <IDENT>
    {constName = token.image;}
    "="
    <NUMBER>
    {constValue = token.image;    try {
        symbolTable.addConstant(constName, constValue);
    } catch(Exception e){
        System.err.println(e.getMessage());
        throw new Error(e);
    }
}
}

String EXPRESSION():
{ String left, right, op = null; }
{
 left = PRODUKT()
 (
  ("+" | "-")
  { op = token.image; }
  right = PRODUKT()
  { left = left + " " + right + " " + op; }
 )*
 { return left; }
}


String PRODUKT():
{ String left, right, op = null; }
{
 left = TERM()
 (
  ("*" | "/")
  { op = token.image; }
  right = TERM()
  { left = left + " " + right + " " + op; }
 )*
 { return left; }

}


String TERM():
{ String result, ident; }
{
 <NUMBER>
 { return token.image; }
 |
 <IDENT>
 { ident = token.image;
        try {
            return symbolTable.getSymbol(ident);
        } catch(Exception e){
            System.err.println(e.getMessage());
            throw new Error(e);
        }
    }
 |
 "(" result = EXPRESSION() ")"
 { return result; }
}

//Programm aus Aufg1 zum Testen: final int i = 5, j = 7; i+3*j

String start():
{}
{
  (CONSTDECL())?
 { String result = EXPRESSION(); }
 <EOF> { return result; }
}