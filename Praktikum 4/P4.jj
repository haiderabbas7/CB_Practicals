/* Mein MiniJavaExp Code aus A1 zum Testen:
final int c = 1; int v = 2; print(c+v*v*v);
*/

//PARSER FÃœR MINIJAVAEXP
PARSER_BEGIN(P4)
	public class P4 {
        private static SymbolTable.SymbolTable symbolTable = new SymbolTable.SymbolTable();

		public static void main (String args []) {
			P4 parser = new P4(System.in);
			try {
                //Hier Parser starten und Ergebnis ausgeben
				String result = parser.start();
                System.out.println(result);
			} catch (ParseException e) {
				System.err.println(e);
			}
		}
	}
PARSER_END(P4)

SKIP:
{
  " " | "\t" | "\n" | "\r"
}

TOKEN :
{
  <FINAL : "final">
| <INT : "int">
| <PRINT : "print">
| <IF : "if">
| <WHILE : "while">
| <ELSE : "else">
| <COMPOP : "!=" | "==" | "<=" | ">=" | ">" | "<">
| <NUMBER : ("0" | ["1"-"9"] (["0"-"9"])*)>
| <IDENT : (["a"-"z"] (["a"-"z"] | ["A"-"Z"] | ["0"-"9"])*)>
}

String PROGRAM():
{String varDecl, statement;}
{
    CONSTDECL()
    varDecl = VARDECL()
    statement = STATEMENT()
    {return varDecl + statement;}
}

void CONSTDECL() :
{}
{
    (<FINAL> <INT> CONSTZUW() CONSTLIST() ";")?
}

//gleicher Code wie in P3
void CONSTZUW():
{ String constName, constValue; }
{
    <IDENT>
    {constName = token.image;}
    "="
    <NUMBER>
    {constValue = token.image;
        try {
          symbolTable.addConstant(constName, constValue);
        } catch(Exception e){
          System.err.println(e.getMessage());
          throw new Error(e);
        }
    }
}

void CONSTLIST():
{}
{
    ("," CONSTZUW())*
}

String VARDECL():
{String varDecl = "";}
{
    (<INT>
        {varDecl = VARZUW() + VARLIST();} ";"
    )?
   {return varDecl;}
}

String VARZUW():
{String varName, varValue; }
{
    <IDENT>
    {varName = token.image;}
    ("=")?
    (<NUMBER>
    { varValue = token.image;
        try{
            String varIndex = symbolTable.addVariable(varName);
            //varValue wird hier in einen String der Zahl als hexadezimal interpretiert umgewandelt
            return "10 " + String.format("%02x", Integer.parseInt(varValue)) + " 36 " + varIndex + " ";}
        catch(Exception e){
            System.err.println(e.getMessage());
            throw new Error(e);
        }
    })?
    { return "";}
}

String VARLIST():
{String varDecl = "";}
{
    ("," {varDecl = varDecl + VARZUW();})*
    {return varDecl;}
}

String EXPRESSION():
{String term, summe;}
{
    term = TERM()
    summe = SUMME(term)
    {return summe;}
}

String SUMME(String term):
{String left, right, op = null;}
{
    {left = term;}
    (
        ("+" | "-")
        { op = token.image; }
        right = TERM()
        {if(op.equals("+")){
            left = left + right + "60 ";
        } else{
            left = left + right + "64 ";
        }
        }
    )*
    {return left;}
}

String TERM():
{String faktor, product;}
{
    faktor = FAKTOR()
    product = PRODUCT(faktor)
    {return product;}
}

String PRODUCT(String faktor):
{String left, right, op = null;}
{
    {left = faktor;}
    (
        ("*" | "/")
        { op = token.image; }
        right = TERM()
        {if(op.equals("*")){
            left = left + right + "68 ";
        } else{
            left = left + right + "6c ";
        }
        }
    )*
    {return left;}
}


String FAKTOR():
{String number, ident, expression;}
{
    <NUMBER>
    {number = token.image;
    return String.format("%02x", Integer.parseInt(number)) + " ";}
    | <IDENT>
    {ident = token.image;
    try{
        boolean isVariable = symbolTable.isVariable(ident);
        String hashMapValue = symbolTable.getSymbol(ident);
        if(isVariable){
            return "15 " + hashMapValue + " ";
        }
        else {
            return "10 " + hashMapValue + " ";
        }
    } catch(Exception e){
            System.err.println(e.getMessage());
            throw new Error(e);
    }
    //return "";
    }
    | "(" expression = EXPRESSION() ")" { return expression;}
}

String STATEMENT():
{String expression;}
{
    <PRINT> "(" expression = EXPRESSION() ")" ";"
    { return expression + "b8 (print) b1 "; }
}

String start():
{ String result; }
{
    result = PROGRAM()
    <EOF> { return result; }
}

/* Mein MiniJavaExp Code aus A1 zum Testen:
final int c = 1; int v = 2; print(c+v*v*v);
*/