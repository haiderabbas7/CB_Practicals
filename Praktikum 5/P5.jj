/*
Mein fibonacci Code aus P2 A1 zum testen:
    final int n = 5; int a = 0, b = 1, c = 0, index = 1; { while index < n { c = b + a; a = b; b = c; index = index + 1; } print(b); }
Code mit Zuweisungen drin:
    final int c = 1; int v = 2; v = 3;
Code mit Zuweisungen und Statementblöcke drin:
    final int c = 1; int v = 2; { v = 3; print(v);}
Code mit Zuweisungen, Statementblöcke und if
    final int c = 1; int v = 2; { if v == 2 print(c); }
Code mit Zuweisungen, Statementblöcke und if else
    final int c = 1; int v = 2; { if v == 2 print(1); else print(2); }
Code mit Zuweisungen, Statementblöcke, if else und while
    final int c = 1; int v = 2; { while v == 2 { print(1); print(2);} }
*/


//PARSER FÜR MINIJAVA
PARSER_BEGIN(P5)
import java.util.ArrayList;
import Compiler.*;

public class P5 {
    private static Compiler compiler = new Compiler();

    public static void main(String[] args) {
        P5 parser = new P5(System.in);
        String main = "";
        try {
            main = parser.start();
        } catch (ParseException e) {
            System.err.println(e);
        }

        //TODO: IST NUR ZUM TESTEN
        //main = "10 05 b3 [n] 10 00 36 00 10 01 36 01 10 00 36 02 10 01 36 03 15 03 b2 [n] a2 00 1c 15 01 15 00 60 36 02 15 01 36 00 15 02 36 01 15 03 10 01 60 36 03 a7 ff e2 15 01 b8 (print) b1";

        // Erstellt eine ArrayListe für die MethodObjects, erstellt die Main und fügt diese der Liste hinzu
        ArrayList<JavaClassFileGenerator.MethodObject> methodObjects = new ArrayList<JavaClassFileGenerator.MethodObject>();
        JavaClassFileGenerator.MethodObject mainMethod = new JavaClassFileGenerator.MethodObject("main", 1, main);
        methodObjects.add(mainMethod);
        System.out.println("Added " + mainMethod);

        // Holt sich alle Methoden vom Compiler ohne die Main methode, erstellt MethodObjects und fügt diese der Liste hinzu
        ArrayList<Method> methods = compiler.getMethodsListWithoutMain();
        for (Method method : methods) {
            JavaClassFileGenerator.MethodObject anotherMethod = new JavaClassFileGenerator.MethodObject(
                    method.getName(),
                    method.getParameterAmount(),
                    method.getBytecode()
            );
            methodObjects.add(anotherMethod);
            System.out.println("Added " + anotherMethod);
        }
        JavaClassFileGenerator.JavaClassFileGenerator classGenerator = new JavaClassFileGenerator.JavaClassFileGenerator("myClass", true, false, true);
        compiler.printAllSymbolTables();
        classGenerator.generateClassFile(methodObjects.toArray(new JavaClassFileGenerator.MethodObject[0]));
    }
}
PARSER_END(P5)

SKIP:
{
  " " | "\t" | "\n" | "\r"
}

TOKEN :
{
  <FINAL : "final">
| <INT : "int">
| <PRINT : "print">
| <IF : "if">
| <WHILE : "while">
| <ELSE : "else">
| <VOID : "void">
| <RETURN : "return">
| <FUNCTION : "func">
| <COMPOP : "!=" | "==" | "<=" | ">=" | ">" | "<">
| <NUMBER : ("0" | ["1"-"9"] (["0"-"9"])*)>
| <IDENT : (["a"-"z"] (["a"-"z"] | ["A"-"Z"] | ["0"-"9"])*)>
}

String PROGRAM():
{ String varDecl, statement; }
{
    CONSTDECL()
    varDecl = VARDECL()
    (PROCEDURE())*
    (FUNCTION())*
    statement = STATEMENT()
    { return varDecl + statement; }
}

void CONSTDECL() :
{}
{
    (<FINAL> <INT> CONSTZUW() CONSTLIST() ";")?
}

void CONSTZUW():
{ String constName; }
{
    <IDENT>
    { constName = token.image; }
    "="
    <NUMBER>
    {
        compiler.addConstant(constName, token.image);
    }
}

void CONSTLIST():
{}
{
    ("," CONSTZUW())*
}

String VARDECL():
{String varDecl = "";}
{
    (
        <INT>
        { varDecl = VARZUW() + VARLIST(); }
        ";"
    )?
   { //System.out.println("DU SCHAFFST DAS \n\n");
    return varDecl; }
}

String VARZUW():
{String varName, result = ""; }
{
    <IDENT>
    {
        //fügt die Variable in die Hashtable ein und speichert sich den Index
        varName = token.image;
        result = compiler.declareVariable(varName);
    }
    (
        "=" <NUMBER>
        {
            //Falls variable doch initialisiert wird, dann erstelle hier den passenden code
            result = compiler.initVariable(varName, token.image);
        }
    )?
    { return result; }
}

String VARLIST():
{String varDecl = "";}
{
    (
        ","
        { varDecl = varDecl + VARZUW(); }
    )*
    { return varDecl; }
}

void PROCEDURE():
{String routinenparameter = "", routinenblock = "";}
{
    <VOID>
    <IDENT>
    {compiler.createMethod(token.image, false);}

    "("
        (
            routinenparameter = ROUTINENPARAMETER()
            {compiler.defineParameters(routinenparameter);}
        )?
    ")"

    "{"
        (
            routinenblock = ROUTINENBLOCK()
            {compiler.generateProcedureCode(routinenblock);}
        )?
    "}"

}


void FUNCTION():
{String routinenparameter = "", routinenblock = "", returnExpression = "";}
{
    <FUNCTION>
    <IDENT>
    {compiler.createMethod(token.image, true);}

    "("
        (
            routinenparameter = ROUTINENPARAMETER()
            {compiler.defineParameters(routinenparameter);}
        )?
    ")"

    "{"
        (
           routinenblock = ROUTINENBLOCK()
        )?
        <RETURN>
        returnExpression = EXPRESSION() ";"
        {
        System.out.println("Parsing RETURN statement: " + returnExpression);
        compiler.generateFunctionCode(routinenblock, returnExpression);}
    "}"
}

String ROUTINENPARAMETER():
{String routinenparameter = "";}
{
    <INT>
    <IDENT>
    {routinenparameter = token.image + " ";}
    (
        "," <INT>
        <IDENT>
        {routinenparameter = routinenparameter + token.image + " ";}
    )*
    {return routinenparameter;}
}


String ROUTINENBLOCK():
{String varDecl, statement;}
{
    CONSTDECL()
    varDecl = VARDECL()
    statement = STATEMENT()
    {return varDecl + statement;}
}

String EXPRESSION():
{String term, summe; }
{
    term = TERM()
    //term wird hier SUMME übergeben, damit der linke Operand in der Methode auch zugänglich ist
    summe = SUMME(term)
    { return summe; }
}

//Codeerzeugung genau wie Postfixtrafo aus P3
String SUMME(String term):
{String left, right, op = null; }
{
    { left = term; }
    (
        ("+" | "-")
        { op = token.image; }
        right = TERM()
        {
            //60 für Addition, 64 für Multiplikation
            if(op.equals("+")){
                left = left + right + "60 ";
            } else{
                left = left + right + "64 ";
            }
        }
    )*
    { return left; }
}

String TERM():
{String faktor, product; }
{
    faktor = FAKTOR()
    product = PRODUCT(faktor)
    { return product; }
}

String PRODUCT(String faktor):
{String left, right, op = null; }
{
    { left = faktor; }
    (
        ("*" | "/")
        { op = token.image; }
        right = TERM()
        {
            if(op.equals("*")){
                left = left + right + "68 ";
            } else{
                left = left + right + "6c ";
            }
        }
    )*
    { return left; }
}

String FAKTOR():
{String number, expression, funcCall = ""; }
{
    <NUMBER>
    {
        //im Falle einer Zahl die Zahl einfach alls Hexwert zurückgeben
        number = token.image;
        return "10 " + String.format("%02x", Integer.parseInt(number)) + " ";
    }
    |

    <IDENT>
    (
        funcCall = FUNCTIONCALL(token.image)
        {return funcCall;}
    )?
    {
        return compiler.generateIdentCode(token.image);
    }
    |
    "(" expression = EXPRESSION() ")" { return expression; }
}

String CONDITION():
{String left = "", right = "", compOP = "";}
{
    left = EXPRESSION()
    <COMPOP> {compOP = token.image;}
    right = EXPRESSION()
    { return compiler.generateConditionCode(left, right, compOP);}
}

String FUNCTIONCALL(String funcName):
{String parameters = "", singleParameter = ""; int amountOfParameters = 0;}
{
    "("
        (
            parameters = EXPRESSION()
            {amountOfParameters++;}
            (
                ","
                singleParameter = EXPRESSION()
                {
                    parameters = parameters + singleParameter;
                    amountOfParameters++;
                }
            )*
        )?
    ")"
    {return compiler.generateCallCode(funcName, amountOfParameters, parameters);}
}

String PROCCALL(String procName):
{String parameters = "", singleParameter = ""; int amountOfParameters = 0;}
{
    "("
        (
            parameters = EXPRESSION()
            {amountOfParameters++;}
            (
                ","
                singleParameter = EXPRESSION()
                {
                    parameters = parameters + singleParameter;
                    amountOfParameters++;
                }
            )*
        )?
    ")"
    {return compiler.generateCallCode(procName, amountOfParameters, parameters);}
}

String STATEMENT():
{String expression = "", ident = "", statement = "", condition = "", optElse = "", procCall = "";}
{
    <IDENT>
    { ident = token.image;}
    (
        "="
        expression = EXPRESSION() ";"

        { return expression + "36 " +  compiler.getVariable(ident) + " "; }

        |

        procCall = PROCCALL(ident) ";"
        { return procCall; }
    )

    |

    <PRINT> "(" expression = EXPRESSION() ")" ";"
    { return expression + "b8 (print) "; }

    |

    "{" statement = STMTLIST() "}"
    { return statement; }

    |

    <IF>
    condition = CONDITION()
    statement = STATEMENT()
    optElse = OPTELSE()
    { return compiler.generateIfCode(condition, statement, optElse); }

    |

    <WHILE>
    condition = CONDITION()
    statement = STATEMENT()
    { return compiler.generateWhileCode(condition, statement); }
}

String OPTELSE():
{String statement = "";}
{
    (
    <ELSE>
    statement = STATEMENT()
    {return statement;}
    )?
    {return "";}
}

String STMTLIST():
{String statement = "", singleStatement = "";}
{
    (
     singleStatement = STATEMENT()
     {statement = statement + singleStatement;}
    )*
    {return statement;}
}

String start():
{String result; }
{
    result = PROGRAM()
    <EOF> { return compiler.resolveLabels(result + "b1 "); }

}

/*
Mein fibonacci Code aus P2 A1 zum testen:
    final int n = 5; int a = 0, b = 1, c = 0, index = 1; { while index < n{ c = b + a; a = b; b = c; index = index + 1; } print(b); }
Code mit Zuweisungen drin:
    final int c = 1; int v = 2; v = 3;
Code mit Zuweisungen und Statementblöcke drin:
    final int c = 1; int v = 2; { v = 3; print(v);}
Code mit Zuweisungen, Statementblöcke und if
    final int c = 1; int v = 2; { if v == 2 print(c); }
Code mit Zuweisungen, Statementblöcke und if else
    final int c = 1; int v = 2; { if v == 2 print(1); else print(2); }
Code mit Zuweisungen, Statementblöcke, if else und while
    final int c = 1; int v = 2; { while v == 2 { print(1); print(2);} }
Code mit ALLEM drin, etwas komplexer
    {while 1 > 1 {if 1 < 1 print(1); else print(2);}}
*/